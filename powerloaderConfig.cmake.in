############################################################################
# Copyright (c) 2019, QuantStack and Mamba Contributors                    #
#                                                                          #
# Distributed under the terms of the BSD 3-Clause License.                 #
#                                                                          #
# The full license is in the file LICENSE, distributed with this software. #
############################################################################

# powerloader cmake module
# This module sets the following variables in your project::
#
#   libpowerloader_FOUND - true if powerloader found on the system
#   libpowerloader_INCLUDE_DIRS - the directory containing powerloader headers
#   libpowerloader_LIBRARY - the library for dynamic linking
#   libpowerloader_STATIC_LIBRARY - the library for static linking
#   libpowerloader_FULL_STATIC_LIBRARY - the library for static linking, incl. static deps

@PACKAGE_INIT@

set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR};${CMAKE_MODULE_PATH}")

@POWERLOADER_CONFIG_CODE@

# TODO: when all the dependencies are packaged correclty,
# find dep or dep-static depending on the available target
# in @PROJECT_NAME@Targets.cmake

include(CMakeFindDependencyMacro)
find_dependency(CURL)
find_dependency(OpenSSL)
find_dependency(CLI11)
find_dependency(yaml-cpp)
find_dependency(tl-expected)
find_dependency(spdlog)


if(NOT TARGET libpowerloader AND NOT TARGET libpowerloader-static)
    include("${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@Targets.cmake")

    if (TARGET libpowerloader-static)
        get_target_property(@PROJECT_NAME@_INCLUDE_DIR libpowerloader-static INTERFACE_INCLUDE_DIRECTORIES)
        get_target_property(@PROJECT_NAME@_STATIC_LIBRARY libpowerloader-static LOCATION)

    if (TARGET libpowerloader)
        get_target_property(@PROJECT_NAME@_INCLUDE_DIR libpowerloader INTERFACE_INCLUDE_DIRECTORIES)
        get_target_property(@PROJECT_NAME@_LIBRARY libpowerloader LOCATION)
    endif ()

endif()
